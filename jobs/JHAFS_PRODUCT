#!/bin/sh

date
export PS4='+ $SECONDS + '
set -xue

export cycle=${cycle:-t${cyc:?}z}
# export storm_num=${storm_num:-1}
# export stormlabel=${stormlabel:-storm$storm_num}
# Lew.Gramer@noaa.gov 2024-04-22:
real_stormlabel=${stormlabel:-storm1}
real_storm_num=${real_stormlabel: -1}
stormlabel=${real_stormlabel}
storm_num=${stormlabel: -1}
# LJG
export hafs_ver=${hafs_ver:?}
export NET=${NET:?}
export RUN=${RUN:?}
export RUN_ENVIR=${RUN_ENVIR:?}

export SENDCOM=${SENDCOM:-YES}
export SENDDBN=${SENDDBN:-NO}
export SENDECF=${SENDECF:-NO}
export EMAIL_SDM=${EMAIL_SDM:-NO}
export SCRUBDATA=${SCRUBDATA:-YES}
# HAFS workflow jobs use shared working dir, and the CLEANUP or SCRUB job will clean up WORKhafs
#export KEEPDATA=${KEEPDATA:-YES}
export KEEPDATA=YES

export HOMEhafs=${HOMEhafs:-${OPSROOT:?}/hafs.${hafs_ver:?}}
export USHhafs=$HOMEhafs/ush
export EXEChafs=$HOMEhafs/exec
export PARMhafs=$HOMEhafs/parm
export FIXhafs=$HOMEhafs/fix

export WORKhafs=${WORKhafs:-${DATAROOT:?}/${RUN:?}${storm_num:?}_${cyc:?}_${envir:?}_${hafs_ver:?}}

if [ "${RUN_ENVIR^^}" != "NCO" ]; then
  # Detect platform and load modules if not run by NCO
  source ${USHhafs}/hafs_pre_job.sh.inc
  export machine=${WHERE_AM_I:-wcoss2}
  module list
else
  # Run by NCO on WCOSS2
  export machine=${WHERE_AM_I:-wcoss2}
  # Prepend $USHhafs to python package search path
  export PYTHONPATH=$USHhafs${PYTHONPATH:+:$PYTHONPATH}
  # Initialize PDY
# setpdy.sh # only needed for the launch job
  # Get PDY
  source ${WORKhafs}/PDY
fi

source ${USHhafs}/hafs_runcmd.sh.inc

env

export COMhafs=${COMhafs:-$(compath.py ${envir}/${NET}/${hafs_ver})/${RUN}.${PDY}/${cyc}}
export CONFhafs=$COMhafs/$stormlabel.conf
export HOLDVARS=${HOLDVARS:-$COMhafs/$stormlabel.holdvars.txt}

source ${HOLDVARS}
stormlabel=${real_stormlabel}
storm_num=${stormlabel: -1}

export ENSDA=${ENSDA:-NO}
export ENSID=${ENSID:-000}

if [ ${ENSDA} = YES ]; then
  export DATA=${WORKhafs}/product_ens/mem${ENSID}
else
  export DATA=${WORKhafs}/product
fi

# Lew.Gramer@noaa.gov 2024-04-26: variables needed for HAFS-M
export STORM=${STORM:-FAKE}
export STORMID=${STORMID:-00L}
export FAKESTORMID=${FAKESTORMID:-00L}
# LJG

# Lew.Gramer@noaa.gov 2024-04-26
# Add multistorm env vars
export RUN_MULTISTORM=${RUN_MULTISTORM:-NO}
export FAKEWORKhafs=${FAKEWORKhafs:-$(echo "${WORKhafs/\/${STORMID}//${FAKESTORMID}}")}
echo "DEBUG: JHAFS_PRODUCT: FAKEWORKhafs = ${FAKEWORKhafs}"
# LJG

if [ "${SCRUBDATA:-YES}" = "YES" ]; then
  rm -rf $DATA
fi
mkdir -p $DATA
cd $DATA

if [ ${gtype} = nest ]; then
  ngrids=$((${nest_grids} + 1))
else
  ngrids=${nest_grids}
fi

# Lew.Gramer@noaa.gov (per Ghassan.Alaka@noaa.gov)
# If multistorm, limit ngrids=1 for the fake storm (00l)
#if [ ${RUN_MULTISTORM} == "YES" ] && [ ${STORMID,,} == "00l" ] && [ ${run_init:-no} == "no" ]; then
# Lew.Gramer@noaa.gov
if [ ${RUN_MULTISTORM} == "YES" ] && [ ${STORMID,,} == "00l" ] && [ ${RUN_INIT:-NO} == "NO" ]; then
# LJG
  ngrids=1
fi
#LJG

rm -f cmdfile_product
# Loop for grids/domains to prepare the cmdfile
echo "DEBUG: JHAFS_PRODUCT: LINE 112: for ng in seq 1 ngrids=${ngrids}"
for ng in $(seq 1 ${ngrids}); do
echo "DEBUG: JHAFS_PRODUCT: LINE 114: ng=${ng}"
  if [[ $ng -eq 1 ]]; then
    neststr=""
    tilestr=".tile1"
    gridstr=$(echo ${out_gridnames} | cut -d, -f ${ng})
  elif [ ${RUN_INIT:-NO} == "YES" ]; then
    neststr=".nest$(printf '%02d' ${ng})"
    tilestr=".tile$(printf '%d' ${ng})"
    gridstr=$(echo ${out_gridnames} | cut -d, -f ${ng})
  else
    echo "DEBUG: ng=${ng}, RUN_INIT=${RUN_INIT:-NO}, storm_num=${storm_num}"
    neststr=".nest$(printf '%02d' ${storm_num})"
    tilestr=".tile$(printf '%d' ${storm_num})"
    gridstr=$(echo ${out_gridnames} | cut -d, -f ${storm_num})
  fi
  echo "export neststr=$neststr tilestr=${tilestr} gridstr=${gridstr} lasttile=$(( ${ng} == ${ngrids} )); \
        ${HOMEhafs}/scripts/exhafs_product.sh \
        > run_product.${gridstr}.log 2>&1" >> cmdfile_product
done
chmod +x cmdfile_product
${APRUNC} ${MPISERIAL} -m cmdfile_product
status=$?; [[ $status -ne 0 ]] && exit $status

# Check if product/tracker run successfully
for ng in $(seq 1 ${ngrids}); do
  if [[ $ng -eq 1 ]]; then
    neststr=""
    gridstr=$(echo ${out_gridnames} | cut -d, -f ${ng})
  elif [ ${RUN_INIT:-NO} == "YES" ]; then
    neststr=".nest$(printf '%02d' ${ng})"
    gridstr=$(echo ${out_gridnames} | cut -d, -f ${ng})
  else
    neststr=".nest$(printf '%02d' ${storm_num})"
    gridstr=$(echo ${out_gridnames} | cut -d, -f ${storm_num})
  fi
  cat ./run_product.${gridstr}.log
  if grep "top of output_all" ./tracker${neststr}/hafs_gettrk.out; then
    echo "INFO: successfully ran run_product.${gridstr}"
  else
    echo "FATAL ERROR: failed running run_product.${gridstr}"
    exit 1
  fi
done

# Cleanup DATA dir
cd ${WORKhafs}
if [ "${KEEPDATA:-YES}" != "YES" ]; then
  rm -rf $DATA
fi

date
